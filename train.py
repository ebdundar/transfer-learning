from __future__ import print_function
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Convolution2D, MaxPooling2D
from keras.utils import np_utils
from keras.callbacks import ModelCheckpoint, EarlyStopping
from keras.models import model_from_json
from keras.optimizers import SGD, Adam

import scipy.io
import numpy as np

np.random.seed(1337)  # for reproducibility


batch_size = 32
nb_classes = 2
nb_epoch = 20
data_augmentation = True

# input image dimensions
img_rows, img_cols = 32, 32
# The CIFAR10 images are RGB.
img_channels = 3

trainmat = scipy.io.loadmat('cifar-01.mat', verify_compressed_data_integrity=False)

X_train = np.array(trainmat['newData'])
y_train = np.array(trainmat['newLabels'])
X_test = np.array(trainmat['newData_test'])
y_test = np.array(trainmat['newLabels_test'])

X_train = X_train.reshape(10000, 32, 32, 3)
X_test = X_test.reshape(2000, 32, 32, 3)


print('X_train shape:', X_train.shape)
print(X_train.shape[0], 'train samples')
print(X_test.shape[0], 'test samples')

# Convert class vectors to binary class matrices.
Y_train = np_utils.to_categorical(y_train, nb_classes)
Y_test = np_utils.to_categorical(y_test, nb_classes)


feature_layers = [
    Convolution2D(32, 3, 3, border_mode='same', input_shape=X_train.shape[1:]),
    Activation('relu'),
    Convolution2D(32, 3, 3),
    Activation('relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Dropout(0.25),
    Convolution2D(64, 3, 3, border_mode='same'),
    Activation('relu'),
    Convolution2D(64, 3, 3),
    Activation('relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Dropout(0.25),
    Flatten(),
]
classification_layers = [
    Dense(512),
    Activation('relu'),
    Dropout(0.5),
    Dense(nb_classes),
    Activation('softmax')
]


X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /= 255
X_test /= 255


model = Sequential(feature_layers + classification_layers)
# evaluate loaded model on test data
model.compile(loss='categorical_crossentropy', optimizer='adadelta', metrics=['accuracy'])

checkpointer = ModelCheckpoint(filepath="Cifar10_2class-model.hdf5", verbose=1, save_best_only=False)

if not data_augmentation:
    print('Not using data augmentation.')
    model.fit(X_train, Y_train,
              batch_size=batch_size,
              nb_epoch=nb_epoch,
              validation_split=0.2,
              shuffle=True)
else:
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images

    # Compute quantities required for featurewise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    datagen.fit(X_train)

    # Fit the model on the batches generated by datagen.flow().
    model.fit_generator(datagen.flow(X_train, Y_train,
                        batch_size=batch_size),
                        samples_per_epoch=X_train.shape[0],
                        nb_epoch=nb_epoch,
                        validation_data=(X_test, Y_test),
                        callbacks=[checkpointer])

# save model
model_json = model.to_json()
with open("model.json", "w") as json_file:
    json_file.write(model_json)

# save weights
model.save_weights("model.h5")
print("Saved model to disk")

score = model.evaluate(X_test, Y_test, verbose=1)
print (score)
